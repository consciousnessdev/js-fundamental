{"version":3,"file":"app/es5/FunctionalProgramming.js","sources":["app/es5/FunctionalProgramming.js"],"names":[],"mappings":"AAAA;AAAA,CAAA,OAAQ,CAAC,wBAAwB,CAAE,UAAS;AAC3C,CAAA,GAAE,CAAC,+CAA+C,CAAE,UAAS;OACtD,CAAA,MAAM,aAAI,CAAC;YAAK,CAAA,CAAC,EAAG,EAAC;MAAA;AAC3B,CAAA,SAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;GACzB,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,gDAAgD,CAAE,UAAS;OACxD,CAAA,KAAK,EAAG,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;OACnB,CAAA,GAAG,EAAG,EAAC;OACP,CAAA,MAAM,EAAG,CAAA,KAAK,QAAQ,WAAC,CAAC;YAAI,CAAA,GAAG,GAAI,EAAC;OAAC;AACzC,CAAA,SAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;OAEjB,CAAA,OAAO,EAAG,CAAA,KAAK,IAAI,WAAC,CAAC;YAAI,CAAA,CAAC,EAAG,EAAC;OAAC;AACrC,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,GAAE,CAAC,CAAC,CAAC;GACrC,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,2BAA2B,CAAE,UAAS,IAAI;;AAC3C,CAAA,OAAI,KAAK,EAAG,QAAO,CAAC;AACpB,CAAA,aAAU,YAAO;AACf,CAAA,WAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAChC,CAAA,SAAI,EAAE,CAAC;KACR,EAAE,IAAG,CAAC,CAAA;GACR,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,YAAY,CAAE,UAAS;OACpB,CAAA,OAAO,EAAG,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;OACnB,CAAA,GAAG,EAAG,EAAC;OAEP,CAAA,QAAQ,EAAG,CAAA,OAAO,OAAO,EAAE;OAC3B,CAAA,IAAI,EAAG,CAAA,QAAQ,KAAK,EAAE;CAE1B,UAAM,CAAC,IAAI,KAAK,CAAE;AAChB,CAAA,QAAG,GAAI,CAAA,IAAI,MAAM,CAAC;AAClB,CAAA,SAAI,EAAG,CAAA,QAAQ,KAAK,EAAE,CAAC;KACxB;AAED,CAFC,SAEK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;GACtB,CAAC,CAAC;AAEH,CAAA,GAAE,CAAC,SAAS,CAAE,UAAS,CAAE,GAQxB,CAAC,CAAC;CACJ,CAAC,CAAC;CAAA","sourcesContent":["describe(\"functional programming\", function(){\n\tit(\"provide a compact syntax to define a function\", function() {\n    let square = (x) => x + x;\n\t\texpect(square(2)).toBe(4);\n  });\n\n  it(\"arrow function, can be used with array methods\", function() {\n    let array = [1,2,3,4,5];\n    let sum = 0;\n    let result = array.forEach(n => sum += n);\n    expect(sum).toBe(15);\n    \n    let doubled = array.map(n => n * 2);\n\t\texpect(doubled).toEqual([2,4,6,8,10]);\n  });\n\n  it(\"lexically binds to 'this'\", function(done) {\n    this.name = 'Fahmi';\n    setTimeout(() => {\n      expect(this.name).toBe('Fahmi');\n      done();\n    }, 200)\n  });\n\n  it(\"iterables \", function() {\n    let numbers = [1,2,3,4];\n    let sum = 0;\n  \n    let iterator = numbers.values();\n    let next = iterator.next();\n\n    while(!next.done) {\n      sum += next.value;\n      next = iterator.next();\n    }\n\n    expect(sum).toBe(10);\n  });\n\n  it(\"for of \", function() {\n    // let arr = [1,2,3,4];\n    // let sum = 0;\n    // for (let n of arr) {\n    //   sum += n;\n    // }\n\n    // expect(sum).toBe(10);\n  });\n});"]}